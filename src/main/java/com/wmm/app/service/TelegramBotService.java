package com.wmm.app.service;

import com.wmm.app.config.TelegramProperties;
import com.wmm.app.domain.InventoryCurrent;
import com.wmm.app.domain.ProductGroup;
import com.wmm.app.domain.ProductGroupLink;
import com.wmm.app.repository.InventoryCurrentRepository;
import com.wmm.app.repository.ProductGroupLinkRepository;
import java.util.*;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.DefaultAbsSender;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Service
public class TelegramBotService {

    private final ProductGroupLinkRepository productGroupLinkRepository;
    private final InventoryCurrentRepository inventoryCurrentRepository;
    private final DefaultAbsSender sender;
    private final String defaultChatId;

    public TelegramBotService(
        ProductGroupLinkRepository productGroupLinkRepository,
        InventoryCurrentRepository inventoryCurrentRepository,
        TelegramProperties telegramProperties
    ) {
        this.productGroupLinkRepository = productGroupLinkRepository;
        this.inventoryCurrentRepository = inventoryCurrentRepository;
        this.defaultChatId = telegramProperties.getChatId();

        String token = telegramProperties.getBot().getToken();
        if (token != null && !token.isBlank()) {
            this.sender = new DefaultAbsSender(new DefaultBotOptions()) {
                @Override
                public String getBotToken() {
                    return token;
                }
            };
        } else {
            this.sender = null;
        }
    }

    // üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞
    public void notifyOutOfStock(String materialCode, String productTitle, String storageType) {
        String message =
            """
            üî¥ *–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è*

            üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s
            üìù *–ö–æ–¥:* `%s`
            üè¢ *–°–∫–ª–∞–¥:* %s
            """.formatted(productTitle, materialCode, storageType);

        sendMessageWithAnalogButton(defaultChatId, message, materialCode);
    }

    // üü° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
    public void notifyLowStock(String materialCode, String productTitle, int visibleStock, int minThreshold, String storageType) {
        String message =
            """
            üü° *–ù–ò–ó–ö–ò–ô –û–°–¢–ê–¢–û–ö –¢–û–í–ê–†–ê*

            üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s
            üìù *–ö–æ–¥:* `%s`
            üì¶ *–û—Å—Ç–∞—Ç–æ–∫:* %d –µ–¥.
            ‚ö†Ô∏è *–ú–∏–Ω–∏–º—É–º:* %d –µ–¥.
            üè¢ *–°–∫–ª–∞–¥:* %s
            """.formatted(productTitle, materialCode, visibleStock, minThreshold, storageType);

        sendMessageWithAnalogButton(defaultChatId, message, materialCode);
    }

    // üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏"
    public void handleAnalogRequest(String materialCode, String chatId) {
        Optional<ProductGroupLink> linkOpt = productGroupLinkRepository.findByMaterialCode(materialCode);
        if (linkOpt.isEmpty()) {
            sendMessage(chatId, "‚ùå –ê–Ω–∞–ª–æ–≥–∏ –¥–ª—è –∫–æ–¥–∞ `" + materialCode + "` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            return;
        }

        ProductGroup group = linkOpt.get().getGroup();
        String groupName = Optional.ofNullable(group.getName()).orElse("–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è");

        // –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –≥—Ä—É–ø–ø–µ, –∫—Ä–æ–º–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        List<ProductGroupLink> links = productGroupLinkRepository.findByGroupId(group.getId());
        List<String> codes = links.stream().map(ProductGroupLink::getMaterialCode).filter(code -> !code.equals(materialCode)).toList();

        if (codes.isEmpty()) {
            sendMessage(chatId, "‚ÑπÔ∏è –í –≥—Ä—É–ø–ø–µ *" + groupName + "* –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–¥–æ–≤.");
            return;
        }

        // –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ InventoryCurrent
        List<InventoryCurrent> items = inventoryCurrentRepository.findByMaterialIn(codes);

        Map<String, Map<String, Integer>> stockMap = new HashMap<>();
        Map<String, String> titles = new HashMap<>();

        for (InventoryCurrent ic : items) {
            Integer qty = ic.getAvailableStock();
            if (qty == null || qty <= 0) continue;

            stockMap.computeIfAbsent(ic.getMaterial(), k -> new HashMap<>()).merge(ic.getStorageType(), qty, Integer::sum);

            if (!titles.containsKey(ic.getMaterial()) && ic.getMaterialDescription() != null) titles.put(
                ic.getMaterial(),
                ic.getMaterialDescription()
            );
        }

        StringBuilder msg = new StringBuilder();
        msg
            .append("üîç *–ê–ù–ê–õ–û–ì–ò –¢–û–í–ê–†–ê*\n\n")
            .append("üßæ –ö–æ–¥: `")
            .append(materialCode)
            .append("`\n")
            .append("üì¶ –ì—Ä—É–ø–ø–∞: *")
            .append(groupName)
            .append("*\n\n");

        int shown = 0;
        for (String code : codes) {
            Map<String, Integer> perStorage = stockMap.get(code);
            if (perStorage == null || perStorage.isEmpty()) continue;
            shown++;

            String title = titles.getOrDefault(code, "");
            msg.append("‚úÖ `").append(code).append("`");
            if (!title.isBlank()) msg.append(" ‚Äî ").append(title);
            msg.append("\n");
            perStorage.forEach((st, q) -> msg.append("   ‚Ä¢ ").append(st).append(" ‚Äî *").append(q).append("* –µ–¥.\n"));
        }

        if (shown == 0) msg.append("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º.");

        sendMessage(chatId, msg.toString());
    }

    // üìò –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏"
    public void sendMessageWithAnalogButton(String chatId, String text, String materialCode) {
        if (sender == null) {
            System.out.println("Telegram sender not configured, skipping message with button: " + text);
            return;
        }

        SendMessage msg = new SendMessage(chatId, text);
        msg.setParseMode("Markdown");

        InlineKeyboardButton analogsBtn = new InlineKeyboardButton();
        analogsBtn.setText("üîç –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏");
        analogsBtn.setCallbackData("/analogs_" + materialCode);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(List.of(analogsBtn)));
        msg.setReplyMarkup(markup);

        try {
            sender.execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    public void sendMessage(String chatId, String text) {
        if (sender == null) {
            System.out.println("Telegram sender not configured, skipping message: " + text);
            return;
        }

        SendMessage message = new SendMessage(chatId, text);
        message.setParseMode("Markdown");
        try {
            sender.execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
